<?xml version="1.0" encoding="UTF-8"?>
<files psalm-version="5.18.0@b113f3ed0259fd6e212d87c3df80eec95a6abf19">
  <file src="src/Classes/FinalRule.php">
    <MissingTemplateParam>
      <code>Rules\Rule</code>
    </MissingTemplateParam>
    <PropertyTypeCoercion>
      <code><![CDATA[[
        'Doctrine\ORM\Mapping\Entity',
    ]]]></code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/Classes/NoExtendsRule.php">
    <MissingTemplateParam>
      <code>Rules\Rule</code>
    </MissingTemplateParam>
    <PropertyTypeCoercion>
      <code><![CDATA[[
        'PHPUnit\\Framework\\TestCase',
    ]]]></code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/Classes/PHPUnit/Framework/TestCaseWithSuffixRule.php">
    <MissingTemplateParam>
      <code>Rules\Rule</code>
    </MissingTemplateParam>
    <PropertyTypeCoercion>
      <code><![CDATA[[
        'PHPUnit\Framework\TestCase',
    ]]]></code>
    </PropertyTypeCoercion>
    <UnnecessaryVarAnnotation>
      <code>string</code>
    </UnnecessaryVarAnnotation>
  </file>
  <file src="src/Closures/NoNullableReturnTypeDeclarationRule.php">
    <MissingTemplateParam>
      <code>Rules\Rule</code>
    </MissingTemplateParam>
  </file>
  <file src="src/Closures/NoParameterWithNullDefaultValueRule.php">
    <MissingTemplateParam>
      <code>Rules\Rule</code>
    </MissingTemplateParam>
  </file>
  <file src="src/Closures/NoParameterWithNullableTypeDeclarationRule.php">
    <MissingTemplateParam>
      <code>Rules\Rule</code>
    </MissingTemplateParam>
  </file>
  <file src="src/Expressions/NoCompactRule.php">
    <MissingTemplateParam>
      <code>Rules\Rule</code>
    </MissingTemplateParam>
  </file>
  <file src="src/Expressions/NoErrorSuppressionRule.php">
    <MissingTemplateParam>
      <code>Rules\Rule</code>
    </MissingTemplateParam>
  </file>
  <file src="src/Expressions/NoEvalRule.php">
    <MissingTemplateParam>
      <code>Rules\Rule</code>
    </MissingTemplateParam>
  </file>
  <file src="src/Expressions/NoIssetRule.php">
    <MissingTemplateParam>
      <code>Rules\Rule</code>
    </MissingTemplateParam>
  </file>
  <file src="src/Files/DeclareStrictTypesRule.php">
    <MissingTemplateParam>
      <code>Rules\Rule</code>
    </MissingTemplateParam>
  </file>
  <file src="src/Functions/NoNullableReturnTypeDeclarationRule.php">
    <MissingTemplateParam>
      <code>Rules\Rule</code>
    </MissingTemplateParam>
  </file>
  <file src="src/Functions/NoParameterWithNullDefaultValueRule.php">
    <MissingTemplateParam>
      <code>Rules\Rule</code>
    </MissingTemplateParam>
    <PossiblyNullArgument>
      <code>$functionName</code>
    </PossiblyNullArgument>
  </file>
  <file src="src/Functions/NoParameterWithNullableTypeDeclarationRule.php">
    <MissingTemplateParam>
      <code>Rules\Rule</code>
    </MissingTemplateParam>
    <PossiblyNullArgument>
      <code>$functionName</code>
    </PossiblyNullArgument>
  </file>
  <file src="src/Methods/FinalInAbstractClassRule.php">
    <MissingTemplateParam>
      <code>Rules\Rule</code>
    </MissingTemplateParam>
  </file>
  <file src="src/Methods/NoConstructorParameterWithDefaultValueRule.php">
    <MissingTemplateParam>
      <code>Rules\Rule</code>
    </MissingTemplateParam>
  </file>
  <file src="src/Methods/NoNullableReturnTypeDeclarationRule.php">
    <MissingTemplateParam>
      <code>Rules\Rule</code>
    </MissingTemplateParam>
  </file>
  <file src="src/Methods/NoParameterWithContainerTypeDeclarationRule.php">
    <ArgumentTypeCoercion>
      <code>$interfaceImplementedByContainer</code>
      <code>$interfaceImplementedByContainer</code>
      <code>$interfaceImplementedByContainer</code>
    </ArgumentTypeCoercion>
    <MissingTemplateParam>
      <code>Rules\Rule</code>
    </MissingTemplateParam>
    <MixedReturnTypeCoercion>
      <code><![CDATA[\array_reduce(
            $node->params,
            function (array $errors, Node\Param $node) use ($scope, $containingClass, $methodName) {
                $type = $node->type;

                if (!$type instanceof Node\Name) {
                    return $errors;
                }

                /** @var Node\Expr\Variable $variable */
                $variable = $node->var;

                /** @var string $parameterName */
                $parameterName = $variable->name;

                $classUsedInTypeDeclaration = $this->reflectionProvider->getClass($scope->resolveName($type));

                if ($classUsedInTypeDeclaration->isInterface()) {
                    foreach ($this->interfacesImplementedByContainers as $interfaceImplementedByContainer) {
                        if ($classUsedInTypeDeclaration->getName() === $interfaceImplementedByContainer) {
                            $errors[] = self::createError(
                                $containingClass,
                                $methodName,
                                $parameterName,
                                $classUsedInTypeDeclaration,
                            );

                            return $errors;
                        }

                        if ($classUsedInTypeDeclaration->getNativeReflection()->isSubclassOf($interfaceImplementedByContainer)) {
                            $errors[] = self::createError(
                                $containingClass,
                                $methodName,
                                $parameterName,
                                $classUsedInTypeDeclaration,
                            );

                            return $errors;
                        }
                    }
                }

                foreach ($this->interfacesImplementedByContainers as $interfaceImplementedByContainer) {
                    if ($classUsedInTypeDeclaration->getNativeReflection()->implementsInterface($interfaceImplementedByContainer)) {
                        $errors[] = self::createError(
                            $containingClass,
                            $methodName,
                            $parameterName,
                            $classUsedInTypeDeclaration,
                        );

                        return $errors;
                    }
                }

                return $errors;
            },
            [],
        )]]></code>
      <code>array</code>
    </MixedReturnTypeCoercion>
  </file>
  <file src="src/Methods/NoParameterWithNullDefaultValueRule.php">
    <MissingTemplateParam>
      <code>Rules\Rule</code>
    </MissingTemplateParam>
  </file>
  <file src="src/Methods/NoParameterWithNullableTypeDeclarationRule.php">
    <MissingTemplateParam>
      <code>Rules\Rule</code>
    </MissingTemplateParam>
  </file>
  <file src="src/Methods/PrivateInFinalClassRule.php">
    <MissingTemplateParam>
      <code>Rules\Rule</code>
    </MissingTemplateParam>
  </file>
  <file src="src/Statements/NoSwitchRule.php">
    <MissingTemplateParam>
      <code>Rules\Rule</code>
    </MissingTemplateParam>
  </file>
  <file src="test/Integration/AbstractTestCase.php">
    <MissingTemplateParam>
      <code>AbstractTestCase</code>
    </MissingTemplateParam>
    <MixedArgumentTypeCoercion>
      <code>[
                $error,
            ]</code>
    </MixedArgumentTypeCoercion>
    <PossiblyUnusedMethod>
      <code>provideCasesWhereAnalysisShouldFail</code>
      <code>provideCasesWhereAnalysisShouldSucceed</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="test/Integration/Classes/FinalRuleTest.php">
    <PossiblyUnusedMethod>
      <code>provideCasesWhereAnalysisShouldFail</code>
      <code>provideCasesWhereAnalysisShouldSucceed</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="test/Integration/Classes/FinalRuleWithAbstractClassesAllowedTest.php">
    <PossiblyUnusedMethod>
      <code>provideCasesWhereAnalysisShouldFail</code>
      <code>provideCasesWhereAnalysisShouldSucceed</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="test/Integration/Classes/FinalRuleWithAttributesTest.php">
    <PossiblyUnusedMethod>
      <code>provideCasesWhereAnalysisShouldFail</code>
      <code>provideCasesWhereAnalysisShouldSucceed</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="test/Integration/Classes/FinalRuleWithExcludedClassNamesTest.php">
    <PossiblyUnusedMethod>
      <code>provideCasesWhereAnalysisShouldFail</code>
      <code>provideCasesWhereAnalysisShouldSucceed</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="test/Integration/Classes/NoExtendsRuleTest.php">
    <PossiblyUnusedMethod>
      <code>provideCasesWhereAnalysisShouldFail</code>
      <code>provideCasesWhereAnalysisShouldSucceed</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="test/Integration/Classes/NoExtendsRuleWithClassesAllowedToBeExtendedTest.php">
    <PossiblyUnusedMethod>
      <code>provideCasesWhereAnalysisShouldFail</code>
      <code>provideCasesWhereAnalysisShouldSucceed</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="test/Integration/Classes/PHPUnit/Framework/TestCaseWithSuffixRuleTest.php">
    <PossiblyUnusedMethod>
      <code>provideCasesWhereAnalysisShouldFail</code>
      <code>provideCasesWhereAnalysisShouldSucceed</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="test/Integration/Closures/NoNullableReturnTypeDeclarationRuleTest.php">
    <PossiblyUnusedMethod>
      <code>provideCasesWhereAnalysisShouldFail</code>
      <code>provideCasesWhereAnalysisShouldSucceed</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="test/Integration/Closures/NoParameterWithNullDefaultValueRuleTest.php">
    <PossiblyUnusedMethod>
      <code>provideCasesWhereAnalysisShouldFail</code>
      <code>provideCasesWhereAnalysisShouldSucceed</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="test/Integration/Closures/NoParameterWithNullableTypeDeclarationRuleTest.php">
    <PossiblyUnusedMethod>
      <code>provideCasesWhereAnalysisShouldFail</code>
      <code>provideCasesWhereAnalysisShouldSucceed</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="test/Integration/Expressions/NoCompactRuleTest.php">
    <PossiblyUnusedMethod>
      <code>provideCasesWhereAnalysisShouldFail</code>
      <code>provideCasesWhereAnalysisShouldSucceed</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="test/Integration/Expressions/NoErrorSuppressionRuleTest.php">
    <PossiblyUnusedMethod>
      <code>provideCasesWhereAnalysisShouldFail</code>
      <code>provideCasesWhereAnalysisShouldSucceed</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="test/Integration/Expressions/NoEvalRuleTest.php">
    <PossiblyUnusedMethod>
      <code>provideCasesWhereAnalysisShouldFail</code>
      <code>provideCasesWhereAnalysisShouldSucceed</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="test/Integration/Expressions/NoIssetRuleTest.php">
    <PossiblyUnusedMethod>
      <code>provideCasesWhereAnalysisShouldFail</code>
      <code>provideCasesWhereAnalysisShouldSucceed</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="test/Integration/Files/DeclareStrictTypesRuleTest.php">
    <PossiblyUnusedMethod>
      <code>provideCasesWhereAnalysisShouldFail</code>
      <code>provideCasesWhereAnalysisShouldSucceed</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="test/Integration/Functions/NoNullableReturnTypeDeclarationRuleTest.php">
    <PossiblyUnusedMethod>
      <code>provideCasesWhereAnalysisShouldFail</code>
      <code>provideCasesWhereAnalysisShouldSucceed</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="test/Integration/Functions/NoParameterWithNullDefaultValueRuleTest.php">
    <PossiblyUnusedMethod>
      <code>provideCasesWhereAnalysisShouldFail</code>
      <code>provideCasesWhereAnalysisShouldSucceed</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="test/Integration/Functions/NoParameterWithNullableTypeDeclarationRuleTest.php">
    <PossiblyUnusedMethod>
      <code>provideCasesWhereAnalysisShouldFail</code>
      <code>provideCasesWhereAnalysisShouldSucceed</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="test/Integration/Methods/FinalInAbstractClassRuleTest.php">
    <PossiblyUnusedMethod>
      <code>provideCasesWhereAnalysisShouldFail</code>
      <code>provideCasesWhereAnalysisShouldSucceed</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="test/Integration/Methods/NoConstructorParameterWithDefaultValueRuleTest.php">
    <PossiblyUnusedMethod>
      <code>provideCasesWhereAnalysisShouldFail</code>
      <code>provideCasesWhereAnalysisShouldSucceed</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="test/Integration/Methods/NoNullableReturnTypeDeclarationRuleTest.php">
    <PossiblyUnusedMethod>
      <code>provideCasesWhereAnalysisShouldFail</code>
      <code>provideCasesWhereAnalysisShouldSucceed</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="test/Integration/Methods/NoParameterWithContainerTypeDeclarationRuleTest.php">
    <PossiblyUnusedMethod>
      <code>provideCasesWhereAnalysisShouldFail</code>
      <code>provideCasesWhereAnalysisShouldSucceed</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="test/Integration/Methods/NoParameterWithNullDefaultValueRuleTest.php">
    <PossiblyUnusedMethod>
      <code>provideCasesWhereAnalysisShouldFail</code>
      <code>provideCasesWhereAnalysisShouldSucceed</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="test/Integration/Methods/NoParameterWithNullableTypeDeclarationRuleTest.php">
    <PossiblyUnusedMethod>
      <code>provideCasesWhereAnalysisShouldFail</code>
      <code>provideCasesWhereAnalysisShouldSucceed</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="test/Integration/Methods/PrivateInFinalClassRuleTest.php">
    <PossiblyUnusedMethod>
      <code>provideCasesWhereAnalysisShouldFail</code>
      <code>provideCasesWhereAnalysisShouldSucceed</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="test/Integration/Statements/NoSwitchRuleTest.php">
    <PossiblyUnusedMethod>
      <code>provideCasesWhereAnalysisShouldFail</code>
      <code>provideCasesWhereAnalysisShouldSucceed</code>
    </PossiblyUnusedMethod>
  </file>
</files>
